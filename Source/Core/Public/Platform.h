/*
-----------------------------------------------------------------------------
THIRD PARTY LICENSES

Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
 and Contributors.

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

Copyright (c) 2000-2014 Torus Knot Software Ltd

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-----------------------------------------------------------------------------

This file is part of construct 3
This file is based on Poco
*/

#pragma once

//
// Platform Identification
//
#define C3_OS_FREE_BSD      0x0001
#define C3_OS_AIX           0x0002
#define C3_OS_HPUX          0x0003
#define C3_OS_TRU64         0x0004
#define C3_OS_LINUX         0x0005
#define C3_OS_MAC_OS_X      0x0006
#define C3_OS_NET_BSD       0x0007
#define C3_OS_OPEN_BSD      0x0008
#define C3_OS_IRIX          0x0009
#define C3_OS_SOLARIS       0x000a
#define C3_OS_QNX           0x000b
#define C3_OS_VXWORKS       0x000c
#define C3_OS_CYGWIN        0x000d
#define C3_OS_NACL	      0x000e
#define C3_OS_UNKNOWN_UNIX  0x00ff
#define C3_OS_WINDOWS_NT    0x1001
#define C3_OS_WINDOWS_CE    0x1011
#define C3_OS_VMS           0x2001


#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
	#define C3_OS_FAMILY_UNIX 1
	#define C3_OS_FAMILY_BSD 1
	#define C3_OS C3_OS_FREE_BSD
#elif defined(_AIX) || defined(__TOS_AIX__)
	#define C3_OS_FAMILY_UNIX 1
	#define C3_OS C3_OS_AIX
#elif defined(hpux) || defined(_hpux) || defined(__hpux)
	#define C3_OS_FAMILY_UNIX 1
	#define C3_OS C3_OS_HPUX
#elif defined(__digital__) || defined(__osf__)
	#define C3_OS_FAMILY_UNIX 1
	#define C3_OS C3_OS_TRU64
#elif defined(__NACL__)
	#define C3_OS_FAMILY_UNIX 1
	#define C3_OS C3_OS_NACL
#elif defined(linux) || defined(__linux) || defined(__linux__) || defined(__TOS_LINUX__) || defined(EMSCRIPTEN)
	#define C3_OS_FAMILY_UNIX 1
	#define C3_OS C3_OS_LINUX
#elif defined(__APPLE__) || defined(__TOS_MACOS__)
	#define C3_OS_FAMILY_UNIX 1
	#define C3_OS_FAMILY_BSD 1
	#define C3_OS C3_OS_MAC_OS_X
#elif defined(__NetBSD__)
	#define C3_OS_FAMILY_UNIX 1
	#define C3_OS_FAMILY_BSD 1
	#define C3_OS C3_OS_NET_BSD
#elif defined(__OpenBSD__)
	#define C3_OS_FAMILY_UNIX 1
	#define C3_OS_FAMILY_BSD 1
	#define C3_OS C3_OS_OPEN_BSD
#elif defined(sgi) || defined(__sgi)
	#define C3_OS_FAMILY_UNIX 1
	#define C3_OS C3_OS_IRIX
#elif defined(sun) || defined(__sun)
	#define C3_OS_FAMILY_UNIX 1
	#define C3_OS C3_OS_SOLARIS
#elif defined(__QNX__)
	#define C3_OS_FAMILY_UNIX 1
	#define C3_OS C3_OS_QNX
#elif defined(__CYGWIN__)
	#define C3_OS_FAMILY_UNIX 1
	#define C3_OS C3_OS_CYGWIN
#elif defined(C3_VXWORKS)
  #define C3_OS_FAMILY_UNIX 1
  #define C3_OS C3_OS_VXWORKS
#elif defined(unix) || defined(__unix) || defined(__unix__)
	#define C3_OS_FAMILY_UNIX 1
	#define C3_OS C3_OS_UNKNOWN_UNIX
#elif defined(_WIN32_WCE)
	#define C3_OS_FAMILY_WINDOWS 1
	#define C3_OS C3_OS_WINDOWS_CE
#elif defined(_WIN32) || defined(_WIN64)
	#define C3_OS_FAMILY_WINDOWS 1
	#define C3_OS C3_OS_WINDOWS_NT
#elif defined(__VMS)
	#define C3_OS_FAMILY_VMS 1
	#define C3_OS C3_OS_VMS
#endif


#if !defined(C3_OS)
	#error "Unknown Platform."
#endif


//
// Hardware Architecture and Byte Order
//
#define C3_ARCH_ALPHA   0x01
#define C3_ARCH_IA32    0x02
#define C3_ARCH_IA64    0x03
#define C3_ARCH_MIPS    0x04
#define C3_ARCH_HPPA    0x05
#define C3_ARCH_PPC     0x06
#define C3_ARCH_POWER   0x07
#define C3_ARCH_SPARC   0x08
#define C3_ARCH_AMD64   0x09
#define C3_ARCH_ARM     0x0a
#define C3_ARCH_M68K    0x0b
#define C3_ARCH_S390    0x0c
#define C3_ARCH_SH      0x0d
#define C3_ARCH_NIOS2   0x0e
#define C3_ARCH_AARCH64 0x0f


#if defined(__ALPHA) || defined(__alpha) || defined(__alpha__) || defined(_M_ALPHA)
	#define C3_ARCH C3_ARCH_ALPHA
	#define C3_ARCH_LITTLE_ENDIAN 1
#elif defined(i386) || defined(__i386) || defined(__i386__) || defined(_M_IX86) || defined(EMSCRIPTEN)
	#define C3_ARCH C3_ARCH_IA32
	#define C3_ARCH_LITTLE_ENDIAN 1
#elif defined(_IA64) || defined(__IA64__) || defined(__ia64__) || defined(__ia64) || defined(_M_IA64)
	#define C3_ARCH C3_ARCH_IA64
	#if defined(hpux) || defined(_hpux)
		#define C3_ARCH_BIG_ENDIAN 1
	#else
		#define C3_ARCH_LITTLE_ENDIAN 1
	#endif
#elif defined(__x86_64__) || defined(_M_X64)
	#define C3_ARCH C3_ARCH_AMD64
	#define C3_ARCH_LITTLE_ENDIAN 1
#elif defined(__mips__) || defined(__mips) || defined(__MIPS__) || defined(_M_MRX000)
	#define C3_ARCH C3_ARCH_MIPS
	#if defined(C3_OS_FAMILY_WINDOWS)
		// Is this OK? Supports windows only little endian??
		#define C3_ARCH_LITTLE_ENDIAN 1
	#elif defined(__MIPSEB__) || defined(_MIPSEB) || defined(__MIPSEB)
		#define C3_ARCH_BIG_ENDIAN 1
	#elif defined(__MIPSEL__) || defined(_MIPSEL) || defined(__MIPSEL)
		#define C3_ARCH_LITTLE_ENDIAN 1
	#else
		#error "MIPS but neither MIPSEL nor MIPSEB?"
	#endif
#elif defined(__hppa) || defined(__hppa__)
	#define C3_ARCH C3_ARCH_HPPA
	#define C3_ARCH_BIG_ENDIAN 1
#elif defined(__PPC) || defined(__POWERPC__) || defined(__powerpc) || defined(__PPC__) || \
      defined(__powerpc__) || defined(__ppc__) || defined(__ppc) || defined(_ARCH_PPC) || defined(_M_PPC)
	#define C3_ARCH C3_ARCH_PPC
	#define C3_ARCH_BIG_ENDIAN 1
#elif defined(_POWER) || defined(_ARCH_PWR) || defined(_ARCH_PWR2) || defined(_ARCH_PWR3) || \
      defined(_ARCH_PWR4) || defined(__THW_RS6000)
	#define C3_ARCH C3_ARCH_POWER
	#define C3_ARCH_BIG_ENDIAN 1
#elif defined(__sparc__) || defined(__sparc) || defined(sparc)
	#define C3_ARCH C3_ARCH_SPARC
	#define C3_ARCH_BIG_ENDIAN 1
#elif defined(__arm__) || defined(__arm) || defined(ARM) || defined(_ARM_) || defined(__ARM__) || defined(_M_ARM)
	#define C3_ARCH C3_ARCH_ARM
	#if defined(__ARMEB__)
		#define C3_ARCH_BIG_ENDIAN 1
	#else
		#define C3_ARCH_LITTLE_ENDIAN 1
	#endif
#elif defined(__arm64__) || defined(__arm64) 
	#define C3_ARCH C3_ARCH_ARM64
	#if defined(__ARMEB__)
		#define C3_ARCH_BIG_ENDIAN 1
	#elif defined(__BYTE_ORDER__) && defined(__ORDER_BIG_ENDIAN__) && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
		#define C3_ARCH_BIG_ENDIAN 1
	#else
		#define C3_ARCH_LITTLE_ENDIAN 1
	#endif
#elif defined(__m68k__)
	#define C3_ARCH C3_ARCH_M68K
	#define C3_ARCH_BIG_ENDIAN 1
#elif defined(__s390__)
	#define C3_ARCH C3_ARCH_S390
	#define C3_ARCH_BIG_ENDIAN 1
#elif defined(__sh__) || defined(__sh) || defined(SHx) || defined(_SHX_)
	#define C3_ARCH C3_ARCH_SH
	#if defined(__LITTLE_ENDIAN__) || (C3_OS == C3_OS_WINDOWS_CE)
		#define C3_ARCH_LITTLE_ENDIAN 1
	#else
		#define C3_ARCH_BIG_ENDIAN 1
	#endif
#elif defined (nios2) || defined(__nios2) || defined(__nios2__)
	#define C3_ARCH C3_ARCH_NIOS2
	#if defined(__nios2_little_endian) || defined(nios2_little_endian) || defined(__nios2_little_endian__)
		#define C3_ARCH_LITTLE_ENDIAN 1
	#else
		#define C3_ARCH_BIG_ENDIAN 1
	#endif
#elif defined(__AARCH64EL__)
	#define C3_ARCH C3_ARCH_AARCH64
	#define C3_ARCH_LITTLE_ENDIAN 1
#elif defined(__AARCH64EB__)
	#define C3_ARCH C3_ARCH_AARCH64
	#define C3_ARCH_BIG_ENDIAN 1
#endif


#if defined(_MSC_VER)
	#define C3_COMPILER_MSVC
#elif defined(__clang__)
	#define C3_COMPILER_CLANG
#elif defined (__GNUC__)
	#define C3_COMPILER_GCC
#elif defined (__MINGW32__) || defined (__MINGW64__)
	#define C3_COMPILER_MINGW
#elif defined (__INTEL_COMPILER) || defined(__ICC) || defined(__ECC) || defined(__ICL)
	#define C3_COMPILER_INTEL
#elif defined (__SUNPRO_CC)
	#define C3_COMPILER_SUN
#elif defined (__MWERKS__) || defined(__CWCC__)
	#define C3_COMPILER_CODEWARRIOR
#elif defined (__sgi) || defined(sgi)
	#define C3_COMPILER_SGI
#elif defined (__HP_aCC)
	#define C3_COMPILER_HP_ACC
#elif defined (__BORLANDC__) || defined(__CODEGEARC__)
	#define C3_COMPILER_CBUILDER
#elif defined (__DMC__)
	#define C3_COMPILER_DMARS
#elif defined (__DECCXX)
	#define C3_COMPILER_COMPAC
#elif (defined (__xlc__) || defined (__xlC__)) && defined(__IBMCPP__)
	#define C3_COMPILER_IBM_XLC // IBM XL C++
#elif defined (__IBMCPP__) && defined(__COMPILER_VER__)
	#define C3_COMPILER_IBM_XLC_ZOS // IBM z/OS C++
#endif

#if !defined(C3_ARCH)
	#error "Unknown Hardware Architecture."
#endif

#if defined(C3_OS_FAMILY_WINDOWS)
	#define C3_DEFAULT_NEWLINE_CHARS "\r\n"
#else
	#define C3_DEFAULT_NEWLINE_CHARS "\n"
#endif
